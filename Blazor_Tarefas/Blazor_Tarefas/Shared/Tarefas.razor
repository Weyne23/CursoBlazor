@inject HttpClient http

@if (tarefas == null)
{
    <Alerta>
        <span style="color: blue">Tarefa Carregando...</span>
    </Alerta>
    @*<p>Carregando...</p>*@
}
else if (!tarefas.Any())
{
    <Alerta>
        <div class="card">
            <div class="card-body">
                Sem Tarefas...
                <span style="color: lightpink"> Sem Tarefas...</span>
            </div>
        </div>
    </Alerta>
    @*<p>Ainda não possui tarefas...</p>*@
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Ação</th>
                <th>Data</th>
                <th>Descição</th>
                <th>Concluida</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in tarefas)
            {
                <tr>
                    <TarefaIndividual item="item" removerTarefa="removeTarefa"/>
                </tr>

            }
        </tbody>
    </table>
}

@if (tarefas != null)
{
    <div class="form-group">
        <label>Tarefa</label>
        <input type="text" placeholder="Informe a tarefa" @bind="novaTarefa" />
        <button class="btn btn-primary" @onclick="AdicionarNovaTarefa">Nova Tarefa</button>
    </div>
}

@code {

    [Parameter] public List<Tarefa> tarefas { get; set; }
    [Parameter] public string titulo { get; set; }

    private void AdicionarNovaTarefa()
    {
        if (!string.IsNullOrWhiteSpace(novaTarefa))
        {
            tarefas.Add(new Tarefa()
            {
                DataCriacao = DateTime.Now,
                Descricao = novaTarefa,
                ID = Guid.NewGuid()
            });

            novaTarefa = "";
        }
    }

    private void removeTarefa(Tarefa terefa)
    {
        tarefas.Remove(tarefas.First(x => x.ID == terefa.ID));
    }

    private string novaTarefa = "";
}